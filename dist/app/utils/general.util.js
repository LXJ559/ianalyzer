"use strict";
var Util = (function () {
    function Util() {
    }
    Util.formatStorageSize = function (size) {
        var i = Math.floor(Math.log(size) / Math.log(1024));
        var _a = [(size / Math.pow(1024, i)).toFixed(2), Util.UNIT[i]], value = _a[0], unit = _a[1];
        return value + " " + unit;
    };
    Util.getGridLoadingTemplate = function (desc) {
        return "<h4 class=\"text-muted\"><i class=\"fa fa-spinner fa-spin\"></i> " + desc + "</h4>";
    };
    Util.getGridNoRowsTemplate = function (desc) {
        return "<h4 class=\"text-muted\">" + desc + "</h4>";
    };
    Util.getLazyLoadingGridOptions = function (loadingStr, noDataStr) {
        return {
            headerHeight: 30,
            overlayLoadingTemplate: Util.getGridLoadingTemplate(loadingStr),
            overlayNoRowsTemplate: Util.getGridNoRowsTemplate(noDataStr),
            rowModelType: "virtual",
            paginationPageSize: Util.DEFAULT_PAGE_SIZE,
            paginationOverflowSize: Util.DEFAULT_OVER_FLOW_SIZE,
            maxConcurrentDatasourceRequests: Util.DEFAULT_DS_REQUESTS,
            paginationInitialRowCount: Util.DEFAULT_PAGINATION_INITIAL_SIZE,
            maxPagesInCache: Util.DEFAULT_PAGE_CACHE,
        };
    };
    Util.getExcelHeader = function (colIdx) {
        var len = Util.EXCEL_HEADER_CHAR.length;
        var result = [];
        var loop = function (index) {
            var _a = [Math.floor(index / len), index % len], int = _a[0], fix = _a[1];
            if (int === 0) {
                result.unshift(Util.EXCEL_HEADER_CHAR[fix]);
            }
            else {
                loop((index - fix) / len);
            }
        };
        loop(colIdx);
        return result.join("");
    };
    Util.isNullOrUndefined = function (val) {
        return val === undefined || val === null;
    };
    return Util;
}());
exports.Util = Util;
Util.UNIT = ["B", "KB", "MB", "GB", "TB"];
Util.EXCEL_HEADER_CHAR = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "M", "N", "O", "P", "Q",
    "R", "S", "T", "U", "V", "W", "X", "Y", "Z"];
Util.LONG_TIME_STRING = "yyyy-MM-dd HH:mm";
Util.DEFAULT_PAGE_SIZE = 20;
Util.DEFAULT_OVER_FLOW_SIZE = 1;
Util.DEFAULT_DS_REQUESTS = 2;
Util.DEFAULT_PAGINATION_INITIAL_SIZE = 1;
Util.DEFAULT_PAGE_CACHE = 10;
Util.LOADING_CELL_TEMPLATE = "<i class=\"fa fa-spinner fa-spin\"></i>";

//# sourceMappingURL=data:application/json;charset=utf8;base64,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RSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFFekMscUJBQWdCLEdBQUcsa0JBQWtCLENBQUM7QUFDdEMsc0JBQWlCLEdBQUcsRUFBRSxDQUFDO0FBQ3ZCLDJCQUFzQixHQUFHLENBQUMsQ0FBQztBQUMzQix3QkFBbUIsR0FBRyxDQUFDLENBQUM7QUFDeEIsb0NBQStCLEdBQUcsQ0FBQyxDQUFDO0FBQ3BDLHVCQUFrQixHQUFHLEVBQUUsQ0FBQztBQVF4QiwwQkFBcUIsR0FBRyx5Q0FBdUMsQ0FBQyIsImZpbGUiOiJ1dGlscy9nZW5lcmFsLnV0aWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgemhvbmdwaW5nLmx1IG9uIDkvMjAvMjAxNi5cbiAqL1xuaW1wb3J0IHtHcmlkT3B0aW9uc30gZnJvbSBcImFnLWdyaWRcIjtcblxuZXhwb3J0IGNsYXNzIFV0aWwge1xuICAgc3RhdGljIFVOSVQgPSBbXCJCXCIsIFwiS0JcIiwgXCJNQlwiLCBcIkdCXCIsIFwiVEJcIl07XG4gICBzdGF0aWMgRVhDRUxfSEVBREVSX0NIQVI6IHN0cmluZ1tdID0gW1wiQVwiLCBcIkJcIiwgXCJDXCIsIFwiRFwiLCBcIkVcIiwgXCJGXCIsIFwiR1wiLCBcIkhcIiwgXCJJXCIsIFwiSlwiLCBcIktcIiwgXCJNXCIsIFwiTlwiLCBcIk9cIiwgXCJQXCIsIFwiUVwiLFxuICAgICAgXCJSXCIsIFwiU1wiLCBcIlRcIiwgXCJVXCIsIFwiVlwiLCBcIldcIiwgXCJYXCIsIFwiWVwiLCBcIlpcIl07XG5cbiAgIHN0YXRpYyBMT05HX1RJTUVfU1RSSU5HID0gXCJ5eXl5LU1NLWRkIEhIOm1tXCI7XG4gICBzdGF0aWMgREVGQVVMVF9QQUdFX1NJWkUgPSAyMDtcbiAgIHN0YXRpYyBERUZBVUxUX09WRVJfRkxPV19TSVpFID0gMTtcbiAgIHN0YXRpYyBERUZBVUxUX0RTX1JFUVVFU1RTID0gMjtcbiAgIHN0YXRpYyBERUZBVUxUX1BBR0lOQVRJT05fSU5JVElBTF9TSVpFID0gMTtcbiAgIHN0YXRpYyBERUZBVUxUX1BBR0VfQ0FDSEUgPSAxMDtcblxuICAgc3RhdGljIGZvcm1hdFN0b3JhZ2VTaXplKHNpemUpOiBzdHJpbmcge1xuICAgICAgbGV0IGkgPSBNYXRoLmZsb29yKE1hdGgubG9nKHNpemUpIC8gTWF0aC5sb2coMTAyNCkpO1xuICAgICAgbGV0IFt2YWx1ZSwgdW5pdF0gPSBbKHNpemUgLyBNYXRoLnBvdygxMDI0LCBpKSkudG9GaXhlZCgyKSwgVXRpbC5VTklUW2ldXTtcbiAgICAgIHJldHVybiBgJHt2YWx1ZX0gJHt1bml0fWA7XG4gICB9XG5cbiAgIHN0YXRpYyBMT0FESU5HX0NFTExfVEVNUExBVEUgPSBgPGkgY2xhc3M9XCJmYSBmYS1zcGlubmVyIGZhLXNwaW5cIj48L2k+YDtcblxuICAgc3RhdGljIGdldEdyaWRMb2FkaW5nVGVtcGxhdGUoZGVzYzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgIHJldHVybiBgPGg0IGNsYXNzPVwidGV4dC1tdXRlZFwiPjxpIGNsYXNzPVwiZmEgZmEtc3Bpbm5lciBmYS1zcGluXCI+PC9pPiAke2Rlc2N9PC9oND5gO1xuICAgfVxuXG4gICBzdGF0aWMgZ2V0R3JpZE5vUm93c1RlbXBsYXRlKGRlc2M6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICByZXR1cm4gYDxoNCBjbGFzcz1cInRleHQtbXV0ZWRcIj4ke2Rlc2N9PC9oND5gO1xuICAgfVxuXG4gICBzdGF0aWMgZ2V0TGF6eUxvYWRpbmdHcmlkT3B0aW9ucyhsb2FkaW5nU3RyOiBzdHJpbmcsIG5vRGF0YVN0cjogc3RyaW5nKTogR3JpZE9wdGlvbnMge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgIGhlYWRlckhlaWdodDogMzAsXG4gICAgICAgICBvdmVybGF5TG9hZGluZ1RlbXBsYXRlOiBVdGlsLmdldEdyaWRMb2FkaW5nVGVtcGxhdGUobG9hZGluZ1N0ciksXG4gICAgICAgICBvdmVybGF5Tm9Sb3dzVGVtcGxhdGU6IFV0aWwuZ2V0R3JpZE5vUm93c1RlbXBsYXRlKG5vRGF0YVN0ciksXG4gICAgICAgICByb3dNb2RlbFR5cGU6IFwidmlydHVhbFwiLFxuICAgICAgICAgcGFnaW5hdGlvblBhZ2VTaXplOiBVdGlsLkRFRkFVTFRfUEFHRV9TSVpFLFxuICAgICAgICAgcGFnaW5hdGlvbk92ZXJmbG93U2l6ZTogVXRpbC5ERUZBVUxUX09WRVJfRkxPV19TSVpFLFxuICAgICAgICAgbWF4Q29uY3VycmVudERhdGFzb3VyY2VSZXF1ZXN0czogVXRpbC5ERUZBVUxUX0RTX1JFUVVFU1RTLFxuICAgICAgICAgcGFnaW5hdGlvbkluaXRpYWxSb3dDb3VudDogVXRpbC5ERUZBVUxUX1BBR0lOQVRJT05fSU5JVElBTF9TSVpFLFxuICAgICAgICAgbWF4UGFnZXNJbkNhY2hlOiBVdGlsLkRFRkFVTFRfUEFHRV9DQUNIRSxcbiAgICAgIH07XG4gICB9XG5cbiAgIHN0YXRpYyBnZXRFeGNlbEhlYWRlcihjb2xJZHg6IG51bWJlcik6IHN0cmluZyB7XG4gICAgICBjb25zdCBsZW4gPSBVdGlsLkVYQ0VMX0hFQURFUl9DSEFSLmxlbmd0aDtcbiAgICAgIGxldCByZXN1bHQ6IHN0cmluZ1tdID0gW107XG5cbiAgICAgIGxldCBsb29wID0gKGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgICAgIGxldCBbaW50LCBmaXhdID0gW01hdGguZmxvb3IoaW5kZXggLyBsZW4pLCBpbmRleCAlIGxlbl07XG5cbiAgICAgICAgIGlmIChpbnQgPT09IDApIHtcbiAgICAgICAgICAgIHJlc3VsdC51bnNoaWZ0KFV0aWwuRVhDRUxfSEVBREVSX0NIQVJbZml4XSk7XG4gICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbG9vcCgoaW5kZXggLSBmaXgpIC8gbGVuKTtcbiAgICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGxvb3AoY29sSWR4KTtcblxuICAgICAgcmV0dXJuIHJlc3VsdC5qb2luKFwiXCIpO1xuICAgfVxuXG4gICBzdGF0aWMgaXNOdWxsT3JVbmRlZmluZWQodmFsOiBhbnkpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiB2YWwgPT09IHVuZGVmaW5lZCB8fCB2YWwgPT09IG51bGw7XG4gICB9XG5cbn1cbiJdfQ==
